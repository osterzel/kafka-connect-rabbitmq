{
  "input": {
    "sourcePartition": {
      "routingKey": "testing"
    },
    "sourceOffset": {
      "deliveryTag": 1
    },
    "kafkaPartition": 0,
    "headers": [],
    "topic": "testing",
    "keySchema": {
      "name": "com.github.jcustenborder.kafka.connect.rabbitmq.MessageKey",
      "doc": "Key used for partition assignment in Kafka.",
      "type": "STRUCT",
      "isOptional": false,
      "fieldSchemas": {
        "messageId": {
          "doc": "The value in the messageId field. `BasicProperties.getMessageId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getMessageId-->`_",
          "type": "STRING",
          "isOptional": true
        }
      }
    },
    "key": {
      "schema": {
        "name": "com.github.jcustenborder.kafka.connect.rabbitmq.MessageKey",
        "doc": "Key used for partition assignment in Kafka.",
        "type": "STRUCT",
        "isOptional": false,
        "fieldSchemas": {
          "messageId": {
            "doc": "The value in the messageId field. `BasicProperties.getMessageId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getMessageId-->`_",
            "type": "STRING",
            "isOptional": true
          }
        }
      },
      "fieldValues": [
        {
          "name": "messageId",
          "schema": {
            "doc": "The value in the messageId field. `BasicProperties.getMessageId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getMessageId-->`_",
            "type": "STRING",
            "isOptional": true
          }
        }
      ]
    },
    "valueSchema": {
      "name": "com.github.jcustenborder.kafka.connect.rabbitmq.Message",
      "doc": "Message as it is delivered to the `RabbitMQ Consumer <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Consumer.html#handleDelivery-java.lang.String-com.rabbitmq.client.Envelope-com.rabbitmq.client.AMQP.BasicProperties-byte:A->`_ ",
      "type": "STRUCT",
      "isOptional": false,
      "fieldSchemas": {
        "consumerTag": {
          "doc": "The consumer tag associated with the consumer",
          "type": "STRING",
          "isOptional": false
        },
        "envelope": {
          "name": "com.github.jcustenborder.kafka.connect.rabbitmq.Envelope",
          "doc": "Encapsulates a group of parameters used for AMQP's Basic methods. See `Envelope <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html>`_",
          "type": "STRUCT",
          "isOptional": false,
          "fieldSchemas": {
            "deliveryTag": {
              "doc": "The delivery tag included in this parameter envelope. See `Envelope.getDeliveryTag() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getDeliveryTag-->`_",
              "type": "INT64",
              "isOptional": false
            },
            "isRedeliver": {
              "doc": "The redelivery flag included in this parameter envelope. See `Envelope.isRedeliver() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#isRedeliver-->`_",
              "type": "BOOLEAN",
              "isOptional": false
            },
            "exchange": {
              "doc": "The name of the exchange included in this parameter envelope. See `Envelope.getExchange() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getExchange-->`_",
              "type": "STRING",
              "isOptional": true
            },
            "routingKey": {
              "doc": "The routing key included in this parameter envelope. See `Envelope.getRoutingKey() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getRoutingKey-->`_",
              "type": "STRING",
              "isOptional": true
            }
          }
        },
        "basicProperties": {
          "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties",
          "doc": "Corresponds to the `BasicProperties <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html>`_",
          "type": "STRUCT",
          "isOptional": true,
          "fieldSchemas": {
            "contentType": {
              "doc": "The value in the contentType field. See `BasicProperties.getContentType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentType-->`_",
              "type": "STRING",
              "isOptional": true
            },
            "contentEncoding": {
              "doc": "The value in the contentEncoding field. See `BasicProperties.getContentEncoding() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentEncoding-->`_",
              "type": "STRING",
              "isOptional": true
            },
            "headers": {
              "type": "MAP",
              "isOptional": false,
              "keySchema": {
                "type": "STRING",
                "isOptional": false
              },
              "valueSchema": {
                "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties.HeaderValue",
                "doc": "Used to store the value of a header value. The `type` field stores the type of the data and the corresponding field to read the data from.",
                "type": "STRUCT",
                "isOptional": false,
                "fieldSchemas": {
                  "type": {
                    "doc": "Used to define the type for the HeaderValue. This will define the corresponding field which will contain the value in it's original type.",
                    "type": "STRING",
                    "isOptional": false
                  },
                  "timestamp": {
                    "name": "org.apache.kafka.connect.data.Timestamp",
                    "doc": "Storage for when the `type` field is set to `timestamp`. Null otherwise.",
                    "type": "INT64",
                    "version": 1,
                    "isOptional": true
                  },
                  "int8": {
                    "doc": "Storage for when the `type` field is set to `int8`. Null otherwise.",
                    "type": "INT8",
                    "isOptional": true
                  },
                  "int16": {
                    "doc": "Storage for when the `type` field is set to `int16`. Null otherwise.",
                    "type": "INT16",
                    "isOptional": true
                  },
                  "int32": {
                    "doc": "Storage for when the `type` field is set to `int32`. Null otherwise.",
                    "type": "INT32",
                    "isOptional": true
                  },
                  "int64": {
                    "doc": "Storage for when the `type` field is set to `int64`. Null otherwise.",
                    "type": "INT64",
                    "isOptional": true
                  },
                  "float32": {
                    "doc": "Storage for when the `type` field is set to `float32`. Null otherwise.",
                    "type": "FLOAT32",
                    "isOptional": true
                  },
                  "float64": {
                    "doc": "Storage for when the `type` field is set to `float64`. Null otherwise.",
                    "type": "FLOAT64",
                    "isOptional": true
                  },
                  "boolean": {
                    "doc": "Storage for when the `type` field is set to `boolean`. Null otherwise.",
                    "type": "BOOLEAN",
                    "isOptional": true
                  },
                  "string": {
                    "doc": "Storage for when the `type` field is set to `string`. Null otherwise.",
                    "type": "STRING",
                    "isOptional": true
                  },
                  "bytes": {
                    "doc": "Storage for when the `type` field is set to `bytes`. Null otherwise.",
                    "type": "BYTES",
                    "isOptional": true
                  }
                }
              }
            },
            "deliveryMode": {
              "doc": "The value in the deliveryMode field. `BasicProperties.html.getDeliveryMode() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getDeliveryMode-->`_ ",
              "type": "INT32",
              "isOptional": true
            },
            "priority": {
              "doc": "The value in the priority field. `BasicProperties.getPriority() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getPriority-->`_",
              "type": "INT32",
              "isOptional": true
            },
            "correlationId": {
              "doc": "The value in the correlationId field. See `BasicProperties.getCorrelationId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getCorrelationId-->`_",
              "type": "STRING",
              "isOptional": true
            },
            "replyTo": {
              "doc": "The value in the replyTo field. `BasicProperties.getReplyTo() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getReplyTo-->`_",
              "type": "STRING",
              "isOptional": true
            },
            "expiration": {
              "doc": "The value in the expiration field. See `BasicProperties.getExpiration() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getExpiration-->`_",
              "type": "STRING",
              "isOptional": true
            },
            "messageId": {
              "doc": "The value in the messageId field. `BasicProperties.getMessageId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getMessageId-->`_",
              "type": "STRING",
              "isOptional": true
            },
            "timestamp": {
              "name": "org.apache.kafka.connect.data.Timestamp",
              "doc": "The value in the timestamp field. `BasicProperties.getTimestamp() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getTimestamp-->`_",
              "type": "INT64",
              "version": 1,
              "isOptional": true
            },
            "type": {
              "doc": "The value in the type field. `BasicProperties.getType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getType-->`_",
              "type": "STRING",
              "isOptional": true
            },
            "userId": {
              "doc": "The value in the userId field. `BasicProperties.getUserId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getUserId-->`_",
              "type": "STRING",
              "isOptional": true
            },
            "appId": {
              "doc": "The value in the appId field. `BasicProperties.getAppId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getAppId-->`_",
              "type": "STRING",
              "isOptional": true
            }
          }
        },
        "body": {
          "doc": "The value body (opaque, client-specific byte array)",
          "type": "BYTES",
          "isOptional": false
        }
      }
    },
    "value": {
      "schema": {
        "name": "com.github.jcustenborder.kafka.connect.rabbitmq.Message",
        "doc": "Message as it is delivered to the `RabbitMQ Consumer <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Consumer.html#handleDelivery-java.lang.String-com.rabbitmq.client.Envelope-com.rabbitmq.client.AMQP.BasicProperties-byte:A->`_ ",
        "type": "STRUCT",
        "isOptional": false,
        "fieldSchemas": {
          "consumerTag": {
            "doc": "The consumer tag associated with the consumer",
            "type": "STRING",
            "isOptional": false
          },
          "envelope": {
            "name": "com.github.jcustenborder.kafka.connect.rabbitmq.Envelope",
            "doc": "Encapsulates a group of parameters used for AMQP's Basic methods. See `Envelope <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html>`_",
            "type": "STRUCT",
            "isOptional": false,
            "fieldSchemas": {
              "deliveryTag": {
                "doc": "The delivery tag included in this parameter envelope. See `Envelope.getDeliveryTag() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getDeliveryTag-->`_",
                "type": "INT64",
                "isOptional": false
              },
              "isRedeliver": {
                "doc": "The redelivery flag included in this parameter envelope. See `Envelope.isRedeliver() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#isRedeliver-->`_",
                "type": "BOOLEAN",
                "isOptional": false
              },
              "exchange": {
                "doc": "The name of the exchange included in this parameter envelope. See `Envelope.getExchange() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getExchange-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "routingKey": {
                "doc": "The routing key included in this parameter envelope. See `Envelope.getRoutingKey() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getRoutingKey-->`_",
                "type": "STRING",
                "isOptional": true
              }
            }
          },
          "basicProperties": {
            "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties",
            "doc": "Corresponds to the `BasicProperties <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html>`_",
            "type": "STRUCT",
            "isOptional": true,
            "fieldSchemas": {
              "contentType": {
                "doc": "The value in the contentType field. See `BasicProperties.getContentType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentType-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "contentEncoding": {
                "doc": "The value in the contentEncoding field. See `BasicProperties.getContentEncoding() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentEncoding-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "headers": {
                "type": "MAP",
                "isOptional": false,
                "keySchema": {
                  "type": "STRING",
                  "isOptional": false
                },
                "valueSchema": {
                  "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties.HeaderValue",
                  "doc": "Used to store the value of a header value. The `type` field stores the type of the data and the corresponding field to read the data from.",
                  "type": "STRUCT",
                  "isOptional": false,
                  "fieldSchemas": {
                    "type": {
                      "doc": "Used to define the type for the HeaderValue. This will define the corresponding field which will contain the value in it's original type.",
                      "type": "STRING",
                      "isOptional": false
                    },
                    "timestamp": {
                      "name": "org.apache.kafka.connect.data.Timestamp",
                      "doc": "Storage for when the `type` field is set to `timestamp`. Null otherwise.",
                      "type": "INT64",
                      "version": 1,
                      "isOptional": true
                    },
                    "int8": {
                      "doc": "Storage for when the `type` field is set to `int8`. Null otherwise.",
                      "type": "INT8",
                      "isOptional": true
                    },
                    "int16": {
                      "doc": "Storage for when the `type` field is set to `int16`. Null otherwise.",
                      "type": "INT16",
                      "isOptional": true
                    },
                    "int32": {
                      "doc": "Storage for when the `type` field is set to `int32`. Null otherwise.",
                      "type": "INT32",
                      "isOptional": true
                    },
                    "int64": {
                      "doc": "Storage for when the `type` field is set to `int64`. Null otherwise.",
                      "type": "INT64",
                      "isOptional": true
                    },
                    "float32": {
                      "doc": "Storage for when the `type` field is set to `float32`. Null otherwise.",
                      "type": "FLOAT32",
                      "isOptional": true
                    },
                    "float64": {
                      "doc": "Storage for when the `type` field is set to `float64`. Null otherwise.",
                      "type": "FLOAT64",
                      "isOptional": true
                    },
                    "boolean": {
                      "doc": "Storage for when the `type` field is set to `boolean`. Null otherwise.",
                      "type": "BOOLEAN",
                      "isOptional": true
                    },
                    "string": {
                      "doc": "Storage for when the `type` field is set to `string`. Null otherwise.",
                      "type": "STRING",
                      "isOptional": true
                    },
                    "bytes": {
                      "doc": "Storage for when the `type` field is set to `bytes`. Null otherwise.",
                      "type": "BYTES",
                      "isOptional": true
                    }
                  }
                }
              },
              "deliveryMode": {
                "doc": "The value in the deliveryMode field. `BasicProperties.html.getDeliveryMode() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getDeliveryMode-->`_ ",
                "type": "INT32",
                "isOptional": true
              },
              "priority": {
                "doc": "The value in the priority field. `BasicProperties.getPriority() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getPriority-->`_",
                "type": "INT32",
                "isOptional": true
              },
              "correlationId": {
                "doc": "The value in the correlationId field. See `BasicProperties.getCorrelationId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getCorrelationId-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "replyTo": {
                "doc": "The value in the replyTo field. `BasicProperties.getReplyTo() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getReplyTo-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "expiration": {
                "doc": "The value in the expiration field. See `BasicProperties.getExpiration() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getExpiration-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "messageId": {
                "doc": "The value in the messageId field. `BasicProperties.getMessageId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getMessageId-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "timestamp": {
                "name": "org.apache.kafka.connect.data.Timestamp",
                "doc": "The value in the timestamp field. `BasicProperties.getTimestamp() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getTimestamp-->`_",
                "type": "INT64",
                "version": 1,
                "isOptional": true
              },
              "type": {
                "doc": "The value in the type field. `BasicProperties.getType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getType-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "userId": {
                "doc": "The value in the userId field. `BasicProperties.getUserId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getUserId-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "appId": {
                "doc": "The value in the appId field. `BasicProperties.getAppId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getAppId-->`_",
                "type": "STRING",
                "isOptional": true
              }
            }
          },
          "body": {
            "doc": "The value body (opaque, client-specific byte array)",
            "type": "BYTES",
            "isOptional": false
          }
        }
      },
      "fieldValues": [
        {
          "name": "consumerTag",
          "schema": {
            "doc": "The consumer tag associated with the consumer",
            "type": "STRING",
            "isOptional": false
          },
          "storage": "amq.ctag-QPkIAiK0WDu21rUOn2bNwQ"
        },
        {
          "name": "envelope",
          "schema": {
            "name": "com.github.jcustenborder.kafka.connect.rabbitmq.Envelope",
            "doc": "Encapsulates a group of parameters used for AMQP's Basic methods. See `Envelope <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html>`_",
            "type": "STRUCT",
            "isOptional": false,
            "fieldSchemas": {
              "deliveryTag": {
                "doc": "The delivery tag included in this parameter envelope. See `Envelope.getDeliveryTag() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getDeliveryTag-->`_",
                "type": "INT64",
                "isOptional": false
              },
              "isRedeliver": {
                "doc": "The redelivery flag included in this parameter envelope. See `Envelope.isRedeliver() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#isRedeliver-->`_",
                "type": "BOOLEAN",
                "isOptional": false
              },
              "exchange": {
                "doc": "The name of the exchange included in this parameter envelope. See `Envelope.getExchange() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getExchange-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "routingKey": {
                "doc": "The routing key included in this parameter envelope. See `Envelope.getRoutingKey() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getRoutingKey-->`_",
                "type": "STRING",
                "isOptional": true
              }
            }
          },
          "struct": {
            "schema": {
              "name": "com.github.jcustenborder.kafka.connect.rabbitmq.Envelope",
              "doc": "Encapsulates a group of parameters used for AMQP's Basic methods. See `Envelope <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html>`_",
              "type": "STRUCT",
              "isOptional": false,
              "fieldSchemas": {
                "deliveryTag": {
                  "doc": "The delivery tag included in this parameter envelope. See `Envelope.getDeliveryTag() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getDeliveryTag-->`_",
                  "type": "INT64",
                  "isOptional": false
                },
                "isRedeliver": {
                  "doc": "The redelivery flag included in this parameter envelope. See `Envelope.isRedeliver() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#isRedeliver-->`_",
                  "type": "BOOLEAN",
                  "isOptional": false
                },
                "exchange": {
                  "doc": "The name of the exchange included in this parameter envelope. See `Envelope.getExchange() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getExchange-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "routingKey": {
                  "doc": "The routing key included in this parameter envelope. See `Envelope.getRoutingKey() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getRoutingKey-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              }
            },
            "fieldValues": [
              {
                "name": "deliveryTag",
                "schema": {
                  "doc": "The delivery tag included in this parameter envelope. See `Envelope.getDeliveryTag() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getDeliveryTag-->`_",
                  "type": "INT64",
                  "isOptional": false
                },
                "storage": 1
              },
              {
                "name": "isRedeliver",
                "schema": {
                  "doc": "The redelivery flag included in this parameter envelope. See `Envelope.isRedeliver() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#isRedeliver-->`_",
                  "type": "BOOLEAN",
                  "isOptional": false
                },
                "storage": false
              },
              {
                "name": "exchange",
                "schema": {
                  "doc": "The name of the exchange included in this parameter envelope. See `Envelope.getExchange() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getExchange-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "storage": ""
              },
              {
                "name": "routingKey",
                "schema": {
                  "doc": "The routing key included in this parameter envelope. See `Envelope.getRoutingKey() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getRoutingKey-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "storage": "testing"
              }
            ]
          }
        },
        {
          "name": "basicProperties",
          "schema": {
            "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties",
            "doc": "Corresponds to the `BasicProperties <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html>`_",
            "type": "STRUCT",
            "isOptional": true,
            "fieldSchemas": {
              "contentType": {
                "doc": "The value in the contentType field. See `BasicProperties.getContentType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentType-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "contentEncoding": {
                "doc": "The value in the contentEncoding field. See `BasicProperties.getContentEncoding() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentEncoding-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "headers": {
                "type": "MAP",
                "isOptional": false,
                "keySchema": {
                  "type": "STRING",
                  "isOptional": false
                },
                "valueSchema": {
                  "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties.HeaderValue",
                  "doc": "Used to store the value of a header value. The `type` field stores the type of the data and the corresponding field to read the data from.",
                  "type": "STRUCT",
                  "isOptional": false,
                  "fieldSchemas": {
                    "type": {
                      "doc": "Used to define the type for the HeaderValue. This will define the corresponding field which will contain the value in it's original type.",
                      "type": "STRING",
                      "isOptional": false
                    },
                    "timestamp": {
                      "name": "org.apache.kafka.connect.data.Timestamp",
                      "doc": "Storage for when the `type` field is set to `timestamp`. Null otherwise.",
                      "type": "INT64",
                      "version": 1,
                      "isOptional": true
                    },
                    "int8": {
                      "doc": "Storage for when the `type` field is set to `int8`. Null otherwise.",
                      "type": "INT8",
                      "isOptional": true
                    },
                    "int16": {
                      "doc": "Storage for when the `type` field is set to `int16`. Null otherwise.",
                      "type": "INT16",
                      "isOptional": true
                    },
                    "int32": {
                      "doc": "Storage for when the `type` field is set to `int32`. Null otherwise.",
                      "type": "INT32",
                      "isOptional": true
                    },
                    "int64": {
                      "doc": "Storage for when the `type` field is set to `int64`. Null otherwise.",
                      "type": "INT64",
                      "isOptional": true
                    },
                    "float32": {
                      "doc": "Storage for when the `type` field is set to `float32`. Null otherwise.",
                      "type": "FLOAT32",
                      "isOptional": true
                    },
                    "float64": {
                      "doc": "Storage for when the `type` field is set to `float64`. Null otherwise.",
                      "type": "FLOAT64",
                      "isOptional": true
                    },
                    "boolean": {
                      "doc": "Storage for when the `type` field is set to `boolean`. Null otherwise.",
                      "type": "BOOLEAN",
                      "isOptional": true
                    },
                    "string": {
                      "doc": "Storage for when the `type` field is set to `string`. Null otherwise.",
                      "type": "STRING",
                      "isOptional": true
                    },
                    "bytes": {
                      "doc": "Storage for when the `type` field is set to `bytes`. Null otherwise.",
                      "type": "BYTES",
                      "isOptional": true
                    }
                  }
                }
              },
              "deliveryMode": {
                "doc": "The value in the deliveryMode field. `BasicProperties.html.getDeliveryMode() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getDeliveryMode-->`_ ",
                "type": "INT32",
                "isOptional": true
              },
              "priority": {
                "doc": "The value in the priority field. `BasicProperties.getPriority() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getPriority-->`_",
                "type": "INT32",
                "isOptional": true
              },
              "correlationId": {
                "doc": "The value in the correlationId field. See `BasicProperties.getCorrelationId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getCorrelationId-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "replyTo": {
                "doc": "The value in the replyTo field. `BasicProperties.getReplyTo() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getReplyTo-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "expiration": {
                "doc": "The value in the expiration field. See `BasicProperties.getExpiration() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getExpiration-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "messageId": {
                "doc": "The value in the messageId field. `BasicProperties.getMessageId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getMessageId-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "timestamp": {
                "name": "org.apache.kafka.connect.data.Timestamp",
                "doc": "The value in the timestamp field. `BasicProperties.getTimestamp() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getTimestamp-->`_",
                "type": "INT64",
                "version": 1,
                "isOptional": true
              },
              "type": {
                "doc": "The value in the type field. `BasicProperties.getType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getType-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "userId": {
                "doc": "The value in the userId field. `BasicProperties.getUserId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getUserId-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "appId": {
                "doc": "The value in the appId field. `BasicProperties.getAppId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getAppId-->`_",
                "type": "STRING",
                "isOptional": true
              }
            }
          },
          "struct": {
            "schema": {
              "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties",
              "doc": "Corresponds to the `BasicProperties <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html>`_",
              "type": "STRUCT",
              "isOptional": true,
              "fieldSchemas": {
                "contentType": {
                  "doc": "The value in the contentType field. See `BasicProperties.getContentType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentType-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "contentEncoding": {
                  "doc": "The value in the contentEncoding field. See `BasicProperties.getContentEncoding() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentEncoding-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "headers": {
                  "type": "MAP",
                  "isOptional": false,
                  "keySchema": {
                    "type": "STRING",
                    "isOptional": false
                  },
                  "valueSchema": {
                    "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties.HeaderValue",
                    "doc": "Used to store the value of a header value. The `type` field stores the type of the data and the corresponding field to read the data from.",
                    "type": "STRUCT",
                    "isOptional": false,
                    "fieldSchemas": {
                      "type": {
                        "doc": "Used to define the type for the HeaderValue. This will define the corresponding field which will contain the value in it's original type.",
                        "type": "STRING",
                        "isOptional": false
                      },
                      "timestamp": {
                        "name": "org.apache.kafka.connect.data.Timestamp",
                        "doc": "Storage for when the `type` field is set to `timestamp`. Null otherwise.",
                        "type": "INT64",
                        "version": 1,
                        "isOptional": true
                      },
                      "int8": {
                        "doc": "Storage for when the `type` field is set to `int8`. Null otherwise.",
                        "type": "INT8",
                        "isOptional": true
                      },
                      "int16": {
                        "doc": "Storage for when the `type` field is set to `int16`. Null otherwise.",
                        "type": "INT16",
                        "isOptional": true
                      },
                      "int32": {
                        "doc": "Storage for when the `type` field is set to `int32`. Null otherwise.",
                        "type": "INT32",
                        "isOptional": true
                      },
                      "int64": {
                        "doc": "Storage for when the `type` field is set to `int64`. Null otherwise.",
                        "type": "INT64",
                        "isOptional": true
                      },
                      "float32": {
                        "doc": "Storage for when the `type` field is set to `float32`. Null otherwise.",
                        "type": "FLOAT32",
                        "isOptional": true
                      },
                      "float64": {
                        "doc": "Storage for when the `type` field is set to `float64`. Null otherwise.",
                        "type": "FLOAT64",
                        "isOptional": true
                      },
                      "boolean": {
                        "doc": "Storage for when the `type` field is set to `boolean`. Null otherwise.",
                        "type": "BOOLEAN",
                        "isOptional": true
                      },
                      "string": {
                        "doc": "Storage for when the `type` field is set to `string`. Null otherwise.",
                        "type": "STRING",
                        "isOptional": true
                      },
                      "bytes": {
                        "doc": "Storage for when the `type` field is set to `bytes`. Null otherwise.",
                        "type": "BYTES",
                        "isOptional": true
                      }
                    }
                  }
                },
                "deliveryMode": {
                  "doc": "The value in the deliveryMode field. `BasicProperties.html.getDeliveryMode() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getDeliveryMode-->`_ ",
                  "type": "INT32",
                  "isOptional": true
                },
                "priority": {
                  "doc": "The value in the priority field. `BasicProperties.getPriority() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getPriority-->`_",
                  "type": "INT32",
                  "isOptional": true
                },
                "correlationId": {
                  "doc": "The value in the correlationId field. See `BasicProperties.getCorrelationId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getCorrelationId-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "replyTo": {
                  "doc": "The value in the replyTo field. `BasicProperties.getReplyTo() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getReplyTo-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "expiration": {
                  "doc": "The value in the expiration field. See `BasicProperties.getExpiration() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getExpiration-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "messageId": {
                  "doc": "The value in the messageId field. `BasicProperties.getMessageId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getMessageId-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "timestamp": {
                  "name": "org.apache.kafka.connect.data.Timestamp",
                  "doc": "The value in the timestamp field. `BasicProperties.getTimestamp() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getTimestamp-->`_",
                  "type": "INT64",
                  "version": 1,
                  "isOptional": true
                },
                "type": {
                  "doc": "The value in the type field. `BasicProperties.getType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getType-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "userId": {
                  "doc": "The value in the userId field. `BasicProperties.getUserId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getUserId-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "appId": {
                  "doc": "The value in the appId field. `BasicProperties.getAppId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getAppId-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              }
            },
            "fieldValues": [
              {
                "name": "contentType",
                "schema": {
                  "doc": "The value in the contentType field. See `BasicProperties.getContentType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentType-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              },
              {
                "name": "contentEncoding",
                "schema": {
                  "doc": "The value in the contentEncoding field. See `BasicProperties.getContentEncoding() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentEncoding-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              },
              {
                "name": "headers",
                "schema": {
                  "type": "MAP",
                  "isOptional": false,
                  "keySchema": {
                    "type": "STRING",
                    "isOptional": false
                  },
                  "valueSchema": {
                    "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties.HeaderValue",
                    "doc": "Used to store the value of a header value. The `type` field stores the type of the data and the corresponding field to read the data from.",
                    "type": "STRUCT",
                    "isOptional": false,
                    "fieldSchemas": {
                      "type": {
                        "doc": "Used to define the type for the HeaderValue. This will define the corresponding field which will contain the value in it's original type.",
                        "type": "STRING",
                        "isOptional": false
                      },
                      "timestamp": {
                        "name": "org.apache.kafka.connect.data.Timestamp",
                        "doc": "Storage for when the `type` field is set to `timestamp`. Null otherwise.",
                        "type": "INT64",
                        "version": 1,
                        "isOptional": true
                      },
                      "int8": {
                        "doc": "Storage for when the `type` field is set to `int8`. Null otherwise.",
                        "type": "INT8",
                        "isOptional": true
                      },
                      "int16": {
                        "doc": "Storage for when the `type` field is set to `int16`. Null otherwise.",
                        "type": "INT16",
                        "isOptional": true
                      },
                      "int32": {
                        "doc": "Storage for when the `type` field is set to `int32`. Null otherwise.",
                        "type": "INT32",
                        "isOptional": true
                      },
                      "int64": {
                        "doc": "Storage for when the `type` field is set to `int64`. Null otherwise.",
                        "type": "INT64",
                        "isOptional": true
                      },
                      "float32": {
                        "doc": "Storage for when the `type` field is set to `float32`. Null otherwise.",
                        "type": "FLOAT32",
                        "isOptional": true
                      },
                      "float64": {
                        "doc": "Storage for when the `type` field is set to `float64`. Null otherwise.",
                        "type": "FLOAT64",
                        "isOptional": true
                      },
                      "boolean": {
                        "doc": "Storage for when the `type` field is set to `boolean`. Null otherwise.",
                        "type": "BOOLEAN",
                        "isOptional": true
                      },
                      "string": {
                        "doc": "Storage for when the `type` field is set to `string`. Null otherwise.",
                        "type": "STRING",
                        "isOptional": true
                      },
                      "bytes": {
                        "doc": "Storage for when the `type` field is set to `bytes`. Null otherwise.",
                        "type": "BYTES",
                        "isOptional": true
                      }
                    }
                  }
                },
                "storage": {
                  "foo": {
                    "schema": {
                      "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties.HeaderValue",
                      "doc": "Used to store the value of a header value. The `type` field stores the type of the data and the corresponding field to read the data from.",
                      "type": "STRUCT",
                      "isOptional": false,
                      "fieldSchemas": {
                        "type": {
                          "doc": "Used to define the type for the HeaderValue. This will define the corresponding field which will contain the value in it's original type.",
                          "type": "STRING",
                          "isOptional": false
                        },
                        "timestamp": {
                          "name": "org.apache.kafka.connect.data.Timestamp",
                          "doc": "Storage for when the `type` field is set to `timestamp`. Null otherwise.",
                          "type": "INT64",
                          "version": 1,
                          "isOptional": true
                        },
                        "int8": {
                          "doc": "Storage for when the `type` field is set to `int8`. Null otherwise.",
                          "type": "INT8",
                          "isOptional": true
                        },
                        "int16": {
                          "doc": "Storage for when the `type` field is set to `int16`. Null otherwise.",
                          "type": "INT16",
                          "isOptional": true
                        },
                        "int32": {
                          "doc": "Storage for when the `type` field is set to `int32`. Null otherwise.",
                          "type": "INT32",
                          "isOptional": true
                        },
                        "int64": {
                          "doc": "Storage for when the `type` field is set to `int64`. Null otherwise.",
                          "type": "INT64",
                          "isOptional": true
                        },
                        "float32": {
                          "doc": "Storage for when the `type` field is set to `float32`. Null otherwise.",
                          "type": "FLOAT32",
                          "isOptional": true
                        },
                        "float64": {
                          "doc": "Storage for when the `type` field is set to `float64`. Null otherwise.",
                          "type": "FLOAT64",
                          "isOptional": true
                        },
                        "boolean": {
                          "doc": "Storage for when the `type` field is set to `boolean`. Null otherwise.",
                          "type": "BOOLEAN",
                          "isOptional": true
                        },
                        "string": {
                          "doc": "Storage for when the `type` field is set to `string`. Null otherwise.",
                          "type": "STRING",
                          "isOptional": true
                        },
                        "bytes": {
                          "doc": "Storage for when the `type` field is set to `bytes`. Null otherwise.",
                          "type": "BYTES",
                          "isOptional": true
                        }
                      }
                    },
                    "fieldValues": [
                      {
                        "name": "type",
                        "schema": {
                          "doc": "Used to define the type for the HeaderValue. This will define the corresponding field which will contain the value in it's original type.",
                          "type": "STRING",
                          "isOptional": false
                        },
                        "storage": "string"
                      },
                      {
                        "name": "timestamp",
                        "schema": {
                          "name": "org.apache.kafka.connect.data.Timestamp",
                          "doc": "Storage for when the `type` field is set to `timestamp`. Null otherwise.",
                          "type": "INT64",
                          "version": 1,
                          "isOptional": true
                        }
                      },
                      {
                        "name": "int8",
                        "schema": {
                          "doc": "Storage for when the `type` field is set to `int8`. Null otherwise.",
                          "type": "INT8",
                          "isOptional": true
                        }
                      },
                      {
                        "name": "int16",
                        "schema": {
                          "doc": "Storage for when the `type` field is set to `int16`. Null otherwise.",
                          "type": "INT16",
                          "isOptional": true
                        }
                      },
                      {
                        "name": "int32",
                        "schema": {
                          "doc": "Storage for when the `type` field is set to `int32`. Null otherwise.",
                          "type": "INT32",
                          "isOptional": true
                        }
                      },
                      {
                        "name": "int64",
                        "schema": {
                          "doc": "Storage for when the `type` field is set to `int64`. Null otherwise.",
                          "type": "INT64",
                          "isOptional": true
                        }
                      },
                      {
                        "name": "float32",
                        "schema": {
                          "doc": "Storage for when the `type` field is set to `float32`. Null otherwise.",
                          "type": "FLOAT32",
                          "isOptional": true
                        }
                      },
                      {
                        "name": "float64",
                        "schema": {
                          "doc": "Storage for when the `type` field is set to `float64`. Null otherwise.",
                          "type": "FLOAT64",
                          "isOptional": true
                        }
                      },
                      {
                        "name": "boolean",
                        "schema": {
                          "doc": "Storage for when the `type` field is set to `boolean`. Null otherwise.",
                          "type": "BOOLEAN",
                          "isOptional": true
                        }
                      },
                      {
                        "name": "string",
                        "schema": {
                          "doc": "Storage for when the `type` field is set to `string`. Null otherwise.",
                          "type": "STRING",
                          "isOptional": true
                        },
                        "storage": "bar"
                      },
                      {
                        "name": "bytes",
                        "schema": {
                          "doc": "Storage for when the `type` field is set to `bytes`. Null otherwise.",
                          "type": "BYTES",
                          "isOptional": true
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "deliveryMode",
                "schema": {
                  "doc": "The value in the deliveryMode field. `BasicProperties.html.getDeliveryMode() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getDeliveryMode-->`_ ",
                  "type": "INT32",
                  "isOptional": true
                },
                "storage": 1
              },
              {
                "name": "priority",
                "schema": {
                  "doc": "The value in the priority field. `BasicProperties.getPriority() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getPriority-->`_",
                  "type": "INT32",
                  "isOptional": true
                }
              },
              {
                "name": "correlationId",
                "schema": {
                  "doc": "The value in the correlationId field. See `BasicProperties.getCorrelationId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getCorrelationId-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              },
              {
                "name": "replyTo",
                "schema": {
                  "doc": "The value in the replyTo field. `BasicProperties.getReplyTo() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getReplyTo-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              },
              {
                "name": "expiration",
                "schema": {
                  "doc": "The value in the expiration field. See `BasicProperties.getExpiration() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getExpiration-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              },
              {
                "name": "messageId",
                "schema": {
                  "doc": "The value in the messageId field. `BasicProperties.getMessageId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getMessageId-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              },
              {
                "name": "timestamp",
                "schema": {
                  "name": "org.apache.kafka.connect.data.Timestamp",
                  "doc": "The value in the timestamp field. `BasicProperties.getTimestamp() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getTimestamp-->`_",
                  "type": "INT64",
                  "version": 1,
                  "isOptional": true
                }
              },
              {
                "name": "type",
                "schema": {
                  "doc": "The value in the type field. `BasicProperties.getType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getType-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              },
              {
                "name": "userId",
                "schema": {
                  "doc": "The value in the userId field. `BasicProperties.getUserId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getUserId-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              },
              {
                "name": "appId",
                "schema": {
                  "doc": "The value in the appId field. `BasicProperties.getAppId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getAppId-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              }
            ]
          }
        },
        {
          "name": "body",
          "schema": {
            "doc": "The value body (opaque, client-specific byte array)",
            "type": "BYTES",
            "isOptional": false
          },
          "storage": "c2Rhc2RmYXNkZg=="
        }
      ]
    },
    "timestamp": 1515448879550
  },
  "expected": {
    "sourcePartition": {
      "routingKey": "testing"
    },
    "sourceOffset": {
      "deliveryTag": 1
    },
    "topic": "testing",
    "keySchema": {
      "type": "STRING",
      "isOptional": false
    },
    "key": "bar",
    "valueSchema": {
      "name": "com.github.jcustenborder.kafka.connect.rabbitmq.Message",
      "doc": "Message as it is delivered to the `RabbitMQ Consumer <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Consumer.html#handleDelivery-java.lang.String-com.rabbitmq.client.Envelope-com.rabbitmq.client.AMQP.BasicProperties-byte:A->`_ ",
      "type": "STRUCT",
      "isOptional": false,
      "fieldSchemas": {
        "consumerTag": {
          "doc": "The consumer tag associated with the consumer",
          "type": "STRING",
          "isOptional": false
        },
        "envelope": {
          "name": "com.github.jcustenborder.kafka.connect.rabbitmq.Envelope",
          "doc": "Encapsulates a group of parameters used for AMQP's Basic methods. See `Envelope <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html>`_",
          "type": "STRUCT",
          "isOptional": false,
          "fieldSchemas": {
            "deliveryTag": {
              "doc": "The delivery tag included in this parameter envelope. See `Envelope.getDeliveryTag() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getDeliveryTag-->`_",
              "type": "INT64",
              "isOptional": false
            },
            "isRedeliver": {
              "doc": "The redelivery flag included in this parameter envelope. See `Envelope.isRedeliver() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#isRedeliver-->`_",
              "type": "BOOLEAN",
              "isOptional": false
            },
            "exchange": {
              "doc": "The name of the exchange included in this parameter envelope. See `Envelope.getExchange() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getExchange-->`_",
              "type": "STRING",
              "isOptional": true
            },
            "routingKey": {
              "doc": "The routing key included in this parameter envelope. See `Envelope.getRoutingKey() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getRoutingKey-->`_",
              "type": "STRING",
              "isOptional": true
            }
          }
        },
        "basicProperties": {
          "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties",
          "doc": "Corresponds to the `BasicProperties <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html>`_",
          "type": "STRUCT",
          "isOptional": true,
          "fieldSchemas": {
            "contentType": {
              "doc": "The value in the contentType field. See `BasicProperties.getContentType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentType-->`_",
              "type": "STRING",
              "isOptional": true
            },
            "contentEncoding": {
              "doc": "The value in the contentEncoding field. See `BasicProperties.getContentEncoding() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentEncoding-->`_",
              "type": "STRING",
              "isOptional": true
            },
            "headers": {
              "type": "MAP",
              "isOptional": false,
              "keySchema": {
                "type": "STRING",
                "isOptional": false
              },
              "valueSchema": {
                "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties.HeaderValue",
                "doc": "Used to store the value of a header value. The `type` field stores the type of the data and the corresponding field to read the data from.",
                "type": "STRUCT",
                "isOptional": false,
                "fieldSchemas": {
                  "type": {
                    "doc": "Used to define the type for the HeaderValue. This will define the corresponding field which will contain the value in it's original type.",
                    "type": "STRING",
                    "isOptional": false
                  },
                  "timestamp": {
                    "name": "org.apache.kafka.connect.data.Timestamp",
                    "doc": "Storage for when the `type` field is set to `timestamp`. Null otherwise.",
                    "type": "INT64",
                    "version": 1,
                    "isOptional": true
                  },
                  "int8": {
                    "doc": "Storage for when the `type` field is set to `int8`. Null otherwise.",
                    "type": "INT8",
                    "isOptional": true
                  },
                  "int16": {
                    "doc": "Storage for when the `type` field is set to `int16`. Null otherwise.",
                    "type": "INT16",
                    "isOptional": true
                  },
                  "int32": {
                    "doc": "Storage for when the `type` field is set to `int32`. Null otherwise.",
                    "type": "INT32",
                    "isOptional": true
                  },
                  "int64": {
                    "doc": "Storage for when the `type` field is set to `int64`. Null otherwise.",
                    "type": "INT64",
                    "isOptional": true
                  },
                  "float32": {
                    "doc": "Storage for when the `type` field is set to `float32`. Null otherwise.",
                    "type": "FLOAT32",
                    "isOptional": true
                  },
                  "float64": {
                    "doc": "Storage for when the `type` field is set to `float64`. Null otherwise.",
                    "type": "FLOAT64",
                    "isOptional": true
                  },
                  "boolean": {
                    "doc": "Storage for when the `type` field is set to `boolean`. Null otherwise.",
                    "type": "BOOLEAN",
                    "isOptional": true
                  },
                  "string": {
                    "doc": "Storage for when the `type` field is set to `string`. Null otherwise.",
                    "type": "STRING",
                    "isOptional": true
                  },
                  "bytes": {
                    "doc": "Storage for when the `type` field is set to `bytes`. Null otherwise.",
                    "type": "BYTES",
                    "isOptional": true
                  }
                }
              }
            },
            "deliveryMode": {
              "doc": "The value in the deliveryMode field. `BasicProperties.html.getDeliveryMode() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getDeliveryMode-->`_ ",
              "type": "INT32",
              "isOptional": true
            },
            "priority": {
              "doc": "The value in the priority field. `BasicProperties.getPriority() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getPriority-->`_",
              "type": "INT32",
              "isOptional": true
            },
            "correlationId": {
              "doc": "The value in the correlationId field. See `BasicProperties.getCorrelationId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getCorrelationId-->`_",
              "type": "STRING",
              "isOptional": true
            },
            "replyTo": {
              "doc": "The value in the replyTo field. `BasicProperties.getReplyTo() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getReplyTo-->`_",
              "type": "STRING",
              "isOptional": true
            },
            "expiration": {
              "doc": "The value in the expiration field. See `BasicProperties.getExpiration() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getExpiration-->`_",
              "type": "STRING",
              "isOptional": true
            },
            "messageId": {
              "doc": "The value in the messageId field. `BasicProperties.getMessageId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getMessageId-->`_",
              "type": "STRING",
              "isOptional": true
            },
            "timestamp": {
              "name": "org.apache.kafka.connect.data.Timestamp",
              "doc": "The value in the timestamp field. `BasicProperties.getTimestamp() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getTimestamp-->`_",
              "type": "INT64",
              "version": 1,
              "isOptional": true
            },
            "type": {
              "doc": "The value in the type field. `BasicProperties.getType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getType-->`_",
              "type": "STRING",
              "isOptional": true
            },
            "userId": {
              "doc": "The value in the userId field. `BasicProperties.getUserId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getUserId-->`_",
              "type": "STRING",
              "isOptional": true
            },
            "appId": {
              "doc": "The value in the appId field. `BasicProperties.getAppId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getAppId-->`_",
              "type": "STRING",
              "isOptional": true
            }
          }
        },
        "body": {
          "doc": "The value body (opaque, client-specific byte array)",
          "type": "BYTES",
          "isOptional": false
        }
      }
    },
    "value": {
      "schema": {
        "name": "com.github.jcustenborder.kafka.connect.rabbitmq.Message",
        "doc": "Message as it is delivered to the `RabbitMQ Consumer <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Consumer.html#handleDelivery-java.lang.String-com.rabbitmq.client.Envelope-com.rabbitmq.client.AMQP.BasicProperties-byte:A->`_ ",
        "type": "STRUCT",
        "isOptional": false,
        "fieldSchemas": {
          "consumerTag": {
            "doc": "The consumer tag associated with the consumer",
            "type": "STRING",
            "isOptional": false
          },
          "envelope": {
            "name": "com.github.jcustenborder.kafka.connect.rabbitmq.Envelope",
            "doc": "Encapsulates a group of parameters used for AMQP's Basic methods. See `Envelope <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html>`_",
            "type": "STRUCT",
            "isOptional": false,
            "fieldSchemas": {
              "deliveryTag": {
                "doc": "The delivery tag included in this parameter envelope. See `Envelope.getDeliveryTag() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getDeliveryTag-->`_",
                "type": "INT64",
                "isOptional": false
              },
              "isRedeliver": {
                "doc": "The redelivery flag included in this parameter envelope. See `Envelope.isRedeliver() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#isRedeliver-->`_",
                "type": "BOOLEAN",
                "isOptional": false
              },
              "exchange": {
                "doc": "The name of the exchange included in this parameter envelope. See `Envelope.getExchange() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getExchange-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "routingKey": {
                "doc": "The routing key included in this parameter envelope. See `Envelope.getRoutingKey() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getRoutingKey-->`_",
                "type": "STRING",
                "isOptional": true
              }
            }
          },
          "basicProperties": {
            "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties",
            "doc": "Corresponds to the `BasicProperties <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html>`_",
            "type": "STRUCT",
            "isOptional": true,
            "fieldSchemas": {
              "contentType": {
                "doc": "The value in the contentType field. See `BasicProperties.getContentType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentType-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "contentEncoding": {
                "doc": "The value in the contentEncoding field. See `BasicProperties.getContentEncoding() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentEncoding-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "headers": {
                "type": "MAP",
                "isOptional": false,
                "keySchema": {
                  "type": "STRING",
                  "isOptional": false
                },
                "valueSchema": {
                  "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties.HeaderValue",
                  "doc": "Used to store the value of a header value. The `type` field stores the type of the data and the corresponding field to read the data from.",
                  "type": "STRUCT",
                  "isOptional": false,
                  "fieldSchemas": {
                    "type": {
                      "doc": "Used to define the type for the HeaderValue. This will define the corresponding field which will contain the value in it's original type.",
                      "type": "STRING",
                      "isOptional": false
                    },
                    "timestamp": {
                      "name": "org.apache.kafka.connect.data.Timestamp",
                      "doc": "Storage for when the `type` field is set to `timestamp`. Null otherwise.",
                      "type": "INT64",
                      "version": 1,
                      "isOptional": true
                    },
                    "int8": {
                      "doc": "Storage for when the `type` field is set to `int8`. Null otherwise.",
                      "type": "INT8",
                      "isOptional": true
                    },
                    "int16": {
                      "doc": "Storage for when the `type` field is set to `int16`. Null otherwise.",
                      "type": "INT16",
                      "isOptional": true
                    },
                    "int32": {
                      "doc": "Storage for when the `type` field is set to `int32`. Null otherwise.",
                      "type": "INT32",
                      "isOptional": true
                    },
                    "int64": {
                      "doc": "Storage for when the `type` field is set to `int64`. Null otherwise.",
                      "type": "INT64",
                      "isOptional": true
                    },
                    "float32": {
                      "doc": "Storage for when the `type` field is set to `float32`. Null otherwise.",
                      "type": "FLOAT32",
                      "isOptional": true
                    },
                    "float64": {
                      "doc": "Storage for when the `type` field is set to `float64`. Null otherwise.",
                      "type": "FLOAT64",
                      "isOptional": true
                    },
                    "boolean": {
                      "doc": "Storage for when the `type` field is set to `boolean`. Null otherwise.",
                      "type": "BOOLEAN",
                      "isOptional": true
                    },
                    "string": {
                      "doc": "Storage for when the `type` field is set to `string`. Null otherwise.",
                      "type": "STRING",
                      "isOptional": true
                    },
                    "bytes": {
                      "doc": "Storage for when the `type` field is set to `bytes`. Null otherwise.",
                      "type": "BYTES",
                      "isOptional": true
                    }
                  }
                }
              },
              "deliveryMode": {
                "doc": "The value in the deliveryMode field. `BasicProperties.html.getDeliveryMode() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getDeliveryMode-->`_ ",
                "type": "INT32",
                "isOptional": true
              },
              "priority": {
                "doc": "The value in the priority field. `BasicProperties.getPriority() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getPriority-->`_",
                "type": "INT32",
                "isOptional": true
              },
              "correlationId": {
                "doc": "The value in the correlationId field. See `BasicProperties.getCorrelationId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getCorrelationId-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "replyTo": {
                "doc": "The value in the replyTo field. `BasicProperties.getReplyTo() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getReplyTo-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "expiration": {
                "doc": "The value in the expiration field. See `BasicProperties.getExpiration() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getExpiration-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "messageId": {
                "doc": "The value in the messageId field. `BasicProperties.getMessageId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getMessageId-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "timestamp": {
                "name": "org.apache.kafka.connect.data.Timestamp",
                "doc": "The value in the timestamp field. `BasicProperties.getTimestamp() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getTimestamp-->`_",
                "type": "INT64",
                "version": 1,
                "isOptional": true
              },
              "type": {
                "doc": "The value in the type field. `BasicProperties.getType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getType-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "userId": {
                "doc": "The value in the userId field. `BasicProperties.getUserId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getUserId-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "appId": {
                "doc": "The value in the appId field. `BasicProperties.getAppId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getAppId-->`_",
                "type": "STRING",
                "isOptional": true
              }
            }
          },
          "body": {
            "doc": "The value body (opaque, client-specific byte array)",
            "type": "BYTES",
            "isOptional": false
          }
        }
      },
      "fieldValues": [
        {
          "name": "consumerTag",
          "schema": {
            "doc": "The consumer tag associated with the consumer",
            "type": "STRING",
            "isOptional": false
          },
          "storage": "amq.ctag-QPkIAiK0WDu21rUOn2bNwQ"
        },
        {
          "name": "envelope",
          "schema": {
            "name": "com.github.jcustenborder.kafka.connect.rabbitmq.Envelope",
            "doc": "Encapsulates a group of parameters used for AMQP's Basic methods. See `Envelope <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html>`_",
            "type": "STRUCT",
            "isOptional": false,
            "fieldSchemas": {
              "deliveryTag": {
                "doc": "The delivery tag included in this parameter envelope. See `Envelope.getDeliveryTag() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getDeliveryTag-->`_",
                "type": "INT64",
                "isOptional": false
              },
              "isRedeliver": {
                "doc": "The redelivery flag included in this parameter envelope. See `Envelope.isRedeliver() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#isRedeliver-->`_",
                "type": "BOOLEAN",
                "isOptional": false
              },
              "exchange": {
                "doc": "The name of the exchange included in this parameter envelope. See `Envelope.getExchange() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getExchange-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "routingKey": {
                "doc": "The routing key included in this parameter envelope. See `Envelope.getRoutingKey() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getRoutingKey-->`_",
                "type": "STRING",
                "isOptional": true
              }
            }
          },
          "struct": {
            "schema": {
              "name": "com.github.jcustenborder.kafka.connect.rabbitmq.Envelope",
              "doc": "Encapsulates a group of parameters used for AMQP's Basic methods. See `Envelope <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html>`_",
              "type": "STRUCT",
              "isOptional": false,
              "fieldSchemas": {
                "deliveryTag": {
                  "doc": "The delivery tag included in this parameter envelope. See `Envelope.getDeliveryTag() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getDeliveryTag-->`_",
                  "type": "INT64",
                  "isOptional": false
                },
                "isRedeliver": {
                  "doc": "The redelivery flag included in this parameter envelope. See `Envelope.isRedeliver() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#isRedeliver-->`_",
                  "type": "BOOLEAN",
                  "isOptional": false
                },
                "exchange": {
                  "doc": "The name of the exchange included in this parameter envelope. See `Envelope.getExchange() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getExchange-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "routingKey": {
                  "doc": "The routing key included in this parameter envelope. See `Envelope.getRoutingKey() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getRoutingKey-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              }
            },
            "fieldValues": [
              {
                "name": "deliveryTag",
                "schema": {
                  "doc": "The delivery tag included in this parameter envelope. See `Envelope.getDeliveryTag() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getDeliveryTag-->`_",
                  "type": "INT64",
                  "isOptional": false
                },
                "storage": 1
              },
              {
                "name": "isRedeliver",
                "schema": {
                  "doc": "The redelivery flag included in this parameter envelope. See `Envelope.isRedeliver() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#isRedeliver-->`_",
                  "type": "BOOLEAN",
                  "isOptional": false
                },
                "storage": false
              },
              {
                "name": "exchange",
                "schema": {
                  "doc": "The name of the exchange included in this parameter envelope. See `Envelope.getExchange() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getExchange-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "storage": ""
              },
              {
                "name": "routingKey",
                "schema": {
                  "doc": "The routing key included in this parameter envelope. See `Envelope.getRoutingKey() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/Envelope.html#getRoutingKey-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "storage": "testing"
              }
            ]
          }
        },
        {
          "name": "basicProperties",
          "schema": {
            "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties",
            "doc": "Corresponds to the `BasicProperties <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html>`_",
            "type": "STRUCT",
            "isOptional": true,
            "fieldSchemas": {
              "contentType": {
                "doc": "The value in the contentType field. See `BasicProperties.getContentType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentType-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "contentEncoding": {
                "doc": "The value in the contentEncoding field. See `BasicProperties.getContentEncoding() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentEncoding-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "headers": {
                "type": "MAP",
                "isOptional": false,
                "keySchema": {
                  "type": "STRING",
                  "isOptional": false
                },
                "valueSchema": {
                  "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties.HeaderValue",
                  "doc": "Used to store the value of a header value. The `type` field stores the type of the data and the corresponding field to read the data from.",
                  "type": "STRUCT",
                  "isOptional": false,
                  "fieldSchemas": {
                    "type": {
                      "doc": "Used to define the type for the HeaderValue. This will define the corresponding field which will contain the value in it's original type.",
                      "type": "STRING",
                      "isOptional": false
                    },
                    "timestamp": {
                      "name": "org.apache.kafka.connect.data.Timestamp",
                      "doc": "Storage for when the `type` field is set to `timestamp`. Null otherwise.",
                      "type": "INT64",
                      "version": 1,
                      "isOptional": true
                    },
                    "int8": {
                      "doc": "Storage for when the `type` field is set to `int8`. Null otherwise.",
                      "type": "INT8",
                      "isOptional": true
                    },
                    "int16": {
                      "doc": "Storage for when the `type` field is set to `int16`. Null otherwise.",
                      "type": "INT16",
                      "isOptional": true
                    },
                    "int32": {
                      "doc": "Storage for when the `type` field is set to `int32`. Null otherwise.",
                      "type": "INT32",
                      "isOptional": true
                    },
                    "int64": {
                      "doc": "Storage for when the `type` field is set to `int64`. Null otherwise.",
                      "type": "INT64",
                      "isOptional": true
                    },
                    "float32": {
                      "doc": "Storage for when the `type` field is set to `float32`. Null otherwise.",
                      "type": "FLOAT32",
                      "isOptional": true
                    },
                    "float64": {
                      "doc": "Storage for when the `type` field is set to `float64`. Null otherwise.",
                      "type": "FLOAT64",
                      "isOptional": true
                    },
                    "boolean": {
                      "doc": "Storage for when the `type` field is set to `boolean`. Null otherwise.",
                      "type": "BOOLEAN",
                      "isOptional": true
                    },
                    "string": {
                      "doc": "Storage for when the `type` field is set to `string`. Null otherwise.",
                      "type": "STRING",
                      "isOptional": true
                    },
                    "bytes": {
                      "doc": "Storage for when the `type` field is set to `bytes`. Null otherwise.",
                      "type": "BYTES",
                      "isOptional": true
                    }
                  }
                }
              },
              "deliveryMode": {
                "doc": "The value in the deliveryMode field. `BasicProperties.html.getDeliveryMode() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getDeliveryMode-->`_ ",
                "type": "INT32",
                "isOptional": true
              },
              "priority": {
                "doc": "The value in the priority field. `BasicProperties.getPriority() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getPriority-->`_",
                "type": "INT32",
                "isOptional": true
              },
              "correlationId": {
                "doc": "The value in the correlationId field. See `BasicProperties.getCorrelationId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getCorrelationId-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "replyTo": {
                "doc": "The value in the replyTo field. `BasicProperties.getReplyTo() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getReplyTo-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "expiration": {
                "doc": "The value in the expiration field. See `BasicProperties.getExpiration() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getExpiration-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "messageId": {
                "doc": "The value in the messageId field. `BasicProperties.getMessageId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getMessageId-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "timestamp": {
                "name": "org.apache.kafka.connect.data.Timestamp",
                "doc": "The value in the timestamp field. `BasicProperties.getTimestamp() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getTimestamp-->`_",
                "type": "INT64",
                "version": 1,
                "isOptional": true
              },
              "type": {
                "doc": "The value in the type field. `BasicProperties.getType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getType-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "userId": {
                "doc": "The value in the userId field. `BasicProperties.getUserId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getUserId-->`_",
                "type": "STRING",
                "isOptional": true
              },
              "appId": {
                "doc": "The value in the appId field. `BasicProperties.getAppId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getAppId-->`_",
                "type": "STRING",
                "isOptional": true
              }
            }
          },
          "struct": {
            "schema": {
              "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties",
              "doc": "Corresponds to the `BasicProperties <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html>`_",
              "type": "STRUCT",
              "isOptional": true,
              "fieldSchemas": {
                "contentType": {
                  "doc": "The value in the contentType field. See `BasicProperties.getContentType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentType-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "contentEncoding": {
                  "doc": "The value in the contentEncoding field. See `BasicProperties.getContentEncoding() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentEncoding-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "headers": {
                  "type": "MAP",
                  "isOptional": false,
                  "keySchema": {
                    "type": "STRING",
                    "isOptional": false
                  },
                  "valueSchema": {
                    "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties.HeaderValue",
                    "doc": "Used to store the value of a header value. The `type` field stores the type of the data and the corresponding field to read the data from.",
                    "type": "STRUCT",
                    "isOptional": false,
                    "fieldSchemas": {
                      "type": {
                        "doc": "Used to define the type for the HeaderValue. This will define the corresponding field which will contain the value in it's original type.",
                        "type": "STRING",
                        "isOptional": false
                      },
                      "timestamp": {
                        "name": "org.apache.kafka.connect.data.Timestamp",
                        "doc": "Storage for when the `type` field is set to `timestamp`. Null otherwise.",
                        "type": "INT64",
                        "version": 1,
                        "isOptional": true
                      },
                      "int8": {
                        "doc": "Storage for when the `type` field is set to `int8`. Null otherwise.",
                        "type": "INT8",
                        "isOptional": true
                      },
                      "int16": {
                        "doc": "Storage for when the `type` field is set to `int16`. Null otherwise.",
                        "type": "INT16",
                        "isOptional": true
                      },
                      "int32": {
                        "doc": "Storage for when the `type` field is set to `int32`. Null otherwise.",
                        "type": "INT32",
                        "isOptional": true
                      },
                      "int64": {
                        "doc": "Storage for when the `type` field is set to `int64`. Null otherwise.",
                        "type": "INT64",
                        "isOptional": true
                      },
                      "float32": {
                        "doc": "Storage for when the `type` field is set to `float32`. Null otherwise.",
                        "type": "FLOAT32",
                        "isOptional": true
                      },
                      "float64": {
                        "doc": "Storage for when the `type` field is set to `float64`. Null otherwise.",
                        "type": "FLOAT64",
                        "isOptional": true
                      },
                      "boolean": {
                        "doc": "Storage for when the `type` field is set to `boolean`. Null otherwise.",
                        "type": "BOOLEAN",
                        "isOptional": true
                      },
                      "string": {
                        "doc": "Storage for when the `type` field is set to `string`. Null otherwise.",
                        "type": "STRING",
                        "isOptional": true
                      },
                      "bytes": {
                        "doc": "Storage for when the `type` field is set to `bytes`. Null otherwise.",
                        "type": "BYTES",
                        "isOptional": true
                      }
                    }
                  }
                },
                "deliveryMode": {
                  "doc": "The value in the deliveryMode field. `BasicProperties.html.getDeliveryMode() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getDeliveryMode-->`_ ",
                  "type": "INT32",
                  "isOptional": true
                },
                "priority": {
                  "doc": "The value in the priority field. `BasicProperties.getPriority() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getPriority-->`_",
                  "type": "INT32",
                  "isOptional": true
                },
                "correlationId": {
                  "doc": "The value in the correlationId field. See `BasicProperties.getCorrelationId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getCorrelationId-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "replyTo": {
                  "doc": "The value in the replyTo field. `BasicProperties.getReplyTo() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getReplyTo-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "expiration": {
                  "doc": "The value in the expiration field. See `BasicProperties.getExpiration() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getExpiration-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "messageId": {
                  "doc": "The value in the messageId field. `BasicProperties.getMessageId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getMessageId-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "timestamp": {
                  "name": "org.apache.kafka.connect.data.Timestamp",
                  "doc": "The value in the timestamp field. `BasicProperties.getTimestamp() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getTimestamp-->`_",
                  "type": "INT64",
                  "version": 1,
                  "isOptional": true
                },
                "type": {
                  "doc": "The value in the type field. `BasicProperties.getType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getType-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "userId": {
                  "doc": "The value in the userId field. `BasicProperties.getUserId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getUserId-->`_",
                  "type": "STRING",
                  "isOptional": true
                },
                "appId": {
                  "doc": "The value in the appId field. `BasicProperties.getAppId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getAppId-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              }
            },
            "fieldValues": [
              {
                "name": "contentType",
                "schema": {
                  "doc": "The value in the contentType field. See `BasicProperties.getContentType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentType-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              },
              {
                "name": "contentEncoding",
                "schema": {
                  "doc": "The value in the contentEncoding field. See `BasicProperties.getContentEncoding() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getContentEncoding-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              },
              {
                "name": "headers",
                "schema": {
                  "type": "MAP",
                  "isOptional": false,
                  "keySchema": {
                    "type": "STRING",
                    "isOptional": false
                  },
                  "valueSchema": {
                    "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties.HeaderValue",
                    "doc": "Used to store the value of a header value. The `type` field stores the type of the data and the corresponding field to read the data from.",
                    "type": "STRUCT",
                    "isOptional": false,
                    "fieldSchemas": {
                      "type": {
                        "doc": "Used to define the type for the HeaderValue. This will define the corresponding field which will contain the value in it's original type.",
                        "type": "STRING",
                        "isOptional": false
                      },
                      "timestamp": {
                        "name": "org.apache.kafka.connect.data.Timestamp",
                        "doc": "Storage for when the `type` field is set to `timestamp`. Null otherwise.",
                        "type": "INT64",
                        "version": 1,
                        "isOptional": true
                      },
                      "int8": {
                        "doc": "Storage for when the `type` field is set to `int8`. Null otherwise.",
                        "type": "INT8",
                        "isOptional": true
                      },
                      "int16": {
                        "doc": "Storage for when the `type` field is set to `int16`. Null otherwise.",
                        "type": "INT16",
                        "isOptional": true
                      },
                      "int32": {
                        "doc": "Storage for when the `type` field is set to `int32`. Null otherwise.",
                        "type": "INT32",
                        "isOptional": true
                      },
                      "int64": {
                        "doc": "Storage for when the `type` field is set to `int64`. Null otherwise.",
                        "type": "INT64",
                        "isOptional": true
                      },
                      "float32": {
                        "doc": "Storage for when the `type` field is set to `float32`. Null otherwise.",
                        "type": "FLOAT32",
                        "isOptional": true
                      },
                      "float64": {
                        "doc": "Storage for when the `type` field is set to `float64`. Null otherwise.",
                        "type": "FLOAT64",
                        "isOptional": true
                      },
                      "boolean": {
                        "doc": "Storage for when the `type` field is set to `boolean`. Null otherwise.",
                        "type": "BOOLEAN",
                        "isOptional": true
                      },
                      "string": {
                        "doc": "Storage for when the `type` field is set to `string`. Null otherwise.",
                        "type": "STRING",
                        "isOptional": true
                      },
                      "bytes": {
                        "doc": "Storage for when the `type` field is set to `bytes`. Null otherwise.",
                        "type": "BYTES",
                        "isOptional": true
                      }
                    }
                  }
                },
                "storage": {
                  "foo": {
                    "schema": {
                      "name": "com.github.jcustenborder.kafka.connect.rabbitmq.BasicProperties.HeaderValue",
                      "doc": "Used to store the value of a header value. The `type` field stores the type of the data and the corresponding field to read the data from.",
                      "type": "STRUCT",
                      "isOptional": false,
                      "fieldSchemas": {
                        "type": {
                          "doc": "Used to define the type for the HeaderValue. This will define the corresponding field which will contain the value in it's original type.",
                          "type": "STRING",
                          "isOptional": false
                        },
                        "timestamp": {
                          "name": "org.apache.kafka.connect.data.Timestamp",
                          "doc": "Storage for when the `type` field is set to `timestamp`. Null otherwise.",
                          "type": "INT64",
                          "version": 1,
                          "isOptional": true
                        },
                        "int8": {
                          "doc": "Storage for when the `type` field is set to `int8`. Null otherwise.",
                          "type": "INT8",
                          "isOptional": true
                        },
                        "int16": {
                          "doc": "Storage for when the `type` field is set to `int16`. Null otherwise.",
                          "type": "INT16",
                          "isOptional": true
                        },
                        "int32": {
                          "doc": "Storage for when the `type` field is set to `int32`. Null otherwise.",
                          "type": "INT32",
                          "isOptional": true
                        },
                        "int64": {
                          "doc": "Storage for when the `type` field is set to `int64`. Null otherwise.",
                          "type": "INT64",
                          "isOptional": true
                        },
                        "float32": {
                          "doc": "Storage for when the `type` field is set to `float32`. Null otherwise.",
                          "type": "FLOAT32",
                          "isOptional": true
                        },
                        "float64": {
                          "doc": "Storage for when the `type` field is set to `float64`. Null otherwise.",
                          "type": "FLOAT64",
                          "isOptional": true
                        },
                        "boolean": {
                          "doc": "Storage for when the `type` field is set to `boolean`. Null otherwise.",
                          "type": "BOOLEAN",
                          "isOptional": true
                        },
                        "string": {
                          "doc": "Storage for when the `type` field is set to `string`. Null otherwise.",
                          "type": "STRING",
                          "isOptional": true
                        },
                        "bytes": {
                          "doc": "Storage for when the `type` field is set to `bytes`. Null otherwise.",
                          "type": "BYTES",
                          "isOptional": true
                        }
                      }
                    },
                    "fieldValues": [
                      {
                        "name": "type",
                        "schema": {
                          "doc": "Used to define the type for the HeaderValue. This will define the corresponding field which will contain the value in it's original type.",
                          "type": "STRING",
                          "isOptional": false
                        },
                        "storage": "string"
                      },
                      {
                        "name": "timestamp",
                        "schema": {
                          "name": "org.apache.kafka.connect.data.Timestamp",
                          "doc": "Storage for when the `type` field is set to `timestamp`. Null otherwise.",
                          "type": "INT64",
                          "version": 1,
                          "isOptional": true
                        }
                      },
                      {
                        "name": "int8",
                        "schema": {
                          "doc": "Storage for when the `type` field is set to `int8`. Null otherwise.",
                          "type": "INT8",
                          "isOptional": true
                        }
                      },
                      {
                        "name": "int16",
                        "schema": {
                          "doc": "Storage for when the `type` field is set to `int16`. Null otherwise.",
                          "type": "INT16",
                          "isOptional": true
                        }
                      },
                      {
                        "name": "int32",
                        "schema": {
                          "doc": "Storage for when the `type` field is set to `int32`. Null otherwise.",
                          "type": "INT32",
                          "isOptional": true
                        }
                      },
                      {
                        "name": "int64",
                        "schema": {
                          "doc": "Storage for when the `type` field is set to `int64`. Null otherwise.",
                          "type": "INT64",
                          "isOptional": true
                        }
                      },
                      {
                        "name": "float32",
                        "schema": {
                          "doc": "Storage for when the `type` field is set to `float32`. Null otherwise.",
                          "type": "FLOAT32",
                          "isOptional": true
                        }
                      },
                      {
                        "name": "float64",
                        "schema": {
                          "doc": "Storage for when the `type` field is set to `float64`. Null otherwise.",
                          "type": "FLOAT64",
                          "isOptional": true
                        }
                      },
                      {
                        "name": "boolean",
                        "schema": {
                          "doc": "Storage for when the `type` field is set to `boolean`. Null otherwise.",
                          "type": "BOOLEAN",
                          "isOptional": true
                        }
                      },
                      {
                        "name": "string",
                        "schema": {
                          "doc": "Storage for when the `type` field is set to `string`. Null otherwise.",
                          "type": "STRING",
                          "isOptional": true
                        },
                        "storage": "bar"
                      },
                      {
                        "name": "bytes",
                        "schema": {
                          "doc": "Storage for when the `type` field is set to `bytes`. Null otherwise.",
                          "type": "BYTES",
                          "isOptional": true
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "deliveryMode",
                "schema": {
                  "doc": "The value in the deliveryMode field. `BasicProperties.html.getDeliveryMode() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getDeliveryMode-->`_ ",
                  "type": "INT32",
                  "isOptional": true
                },
                "storage": 1
              },
              {
                "name": "priority",
                "schema": {
                  "doc": "The value in the priority field. `BasicProperties.getPriority() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getPriority-->`_",
                  "type": "INT32",
                  "isOptional": true
                }
              },
              {
                "name": "correlationId",
                "schema": {
                  "doc": "The value in the correlationId field. See `BasicProperties.getCorrelationId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getCorrelationId-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              },
              {
                "name": "replyTo",
                "schema": {
                  "doc": "The value in the replyTo field. `BasicProperties.getReplyTo() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getReplyTo-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              },
              {
                "name": "expiration",
                "schema": {
                  "doc": "The value in the expiration field. See `BasicProperties.getExpiration() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getExpiration-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              },
              {
                "name": "messageId",
                "schema": {
                  "doc": "The value in the messageId field. `BasicProperties.getMessageId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getMessageId-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              },
              {
                "name": "timestamp",
                "schema": {
                  "name": "org.apache.kafka.connect.data.Timestamp",
                  "doc": "The value in the timestamp field. `BasicProperties.getTimestamp() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getTimestamp-->`_",
                  "type": "INT64",
                  "version": 1,
                  "isOptional": true
                }
              },
              {
                "name": "type",
                "schema": {
                  "doc": "The value in the type field. `BasicProperties.getType() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getType-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              },
              {
                "name": "userId",
                "schema": {
                  "doc": "The value in the userId field. `BasicProperties.getUserId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getUserId-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              },
              {
                "name": "appId",
                "schema": {
                  "doc": "The value in the appId field. `BasicProperties.getAppId() <https://www.rabbitmq.com/releases/rabbitmq-java-client/current-javadoc/com/rabbitmq/client/BasicProperties.html#getAppId-->`_",
                  "type": "STRING",
                  "isOptional": true
                }
              }
            ]
          }
        },
        {
          "name": "body",
          "schema": {
            "doc": "The value body (opaque, client-specific byte array)",
            "type": "BYTES",
            "isOptional": false
          },
          "storage": "c2Rhc2RmYXNkZg=="
        }
      ]
    },
    "timestamp": 1515448879550
  }
}